{"ast":null,"code":"import { throwError } from \"rxjs\";\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(http) {\n    this.http = http;\n    this.productUrl = \"api/products/products.json\";\n  }\n  getProducts() {\n    return this.http.get(this.productUrl).pipe(tap(data => console.log('All:', JSON.stringify(data))), catchError(this.handleError));\n  }\n  handleError(err) {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage = '';\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(errorMessage);\n  }\n  static #_ = this.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["throwError","tap","catchError","ProductService","constructor","http","productUrl","getProducts","get","pipe","data","console","log","JSON","stringify","handleError","err","errorMessage","error","ErrorEvent","message","status","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Projects\\AngularGettingStarted\\src\\app\\products\\product.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { IProduct } from \"./product\";\r\nimport { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { tap, catchError } from 'rxjs/operators'; \r\nimport { JsonPipe } from \"@angular/common\";\r\n\r\n@Injectable({\r\nprovidedIn: 'root'\r\n})\r\nexport class ProductService {\r\n  private productUrl = \"api/products/products.json\";\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n    getProducts(): Observable<IProduct[]> {\r\n        return this.http.get<IProduct[]>(this.productUrl).pipe(\r\n          tap(data => console.log('All:', JSON.stringify(data))),\r\n          catchError(this.handleError));\r\n    }\r\n\r\n    private handleError(err: HttpErrorResponse): Observable<never> {\r\n      // in a real world app, we may send the server to some remote logging infrastructure\r\n      // instead of just logging it to the console\r\n      let errorMessage = '';\r\n      if (err.error instanceof ErrorEvent) {\r\n        // A client-side or network error occurred. Handle it accordingly.\r\n        errorMessage = `An error occurred: ${err.error.message}`;\r\n      } else {\r\n        // The backend returned an unsuccessful response code.\r\n        // The response body may contain clues as to what went wrong,\r\n        errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\r\n      }\r\n      console.error(errorMessage);\r\n      return throwError(errorMessage);\r\n    }\r\n}"],"mappings":"AAGA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;;;AAMhD,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,UAAU,GAAG,4BAA4B;EAEV;EAErCC,WAAWA,CAAA;IACP,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAa,IAAI,CAACF,UAAU,CAAC,CAACG,IAAI,CACpDR,GAAG,CAACS,IAAI,IAAIC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC,CAAC,EACtDR,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAAC;EACnC;EAEQA,WAAWA,CAACC,GAAsB;IACxC;IACA;IACA,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,GAAG,CAACE,KAAK,YAAYC,UAAU,EAAE;MACnC;MACAF,YAAY,GAAG,sBAAsBD,GAAG,CAACE,KAAK,CAACE,OAAO,EAAE;IAC1D,CAAC,MAAM;MACL;MACA;MACAH,YAAY,GAAG,yBAAyBD,GAAG,CAACK,MAAM,uBAAuBL,GAAG,CAACI,OAAO,EAAE;IACxF;IACAT,OAAO,CAACO,KAAK,CAACD,YAAY,CAAC;IAC3B,OAAOjB,UAAU,CAACiB,YAAY,CAAC;EACjC;EAAC,QAAAK,CAAA,G;qBAzBQnB,cAAc,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdxB,cAAc;IAAAyB,OAAA,EAAdzB,cAAc,CAAA0B,IAAA;IAAAC,UAAA,EAFf;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}